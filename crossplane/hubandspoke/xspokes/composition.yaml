apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xspokes.planum.mblb.net #has to be plural
  labels:
    planum.mblb.net/managed-by: "true"
spec:
  compositeTypeRef:
    apiVersion: planum.mblb.net/v1alpha1
    kind: XSpoke #has to be singular

  environment:
    environmentConfigs:
      - type: Selector
        selector:
          matchLabels:
            - key: hub
              type: FromCompositeFieldPath
              valueFromFieldPath: spec.parameters.hub

  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: upbound-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        patchSets:
        - name: common-parameters
          patches:
          - type: FromCompositeFieldPath
            fromFieldPath: spec.resourceConfig.providerConfigName
            toFieldPath: spec.resourceConfig.providerConfigName
          - type: FromCompositeFieldPath
            fromFieldPath: spec.resourceConfig.location
            toFieldPath: spec.resourceConfig.location
          - type: FromCompositeFieldPath
            fromFieldPath: spec.resourceConfig.environment
            toFieldPath: spec.resourceConfig.environment

        resources:
        - name: network-spoke1
          base:
            apiVersion: planum.mblb.net/v1alpha1
            kind: XNetwork
            metadata:
              name: network-spoke1
            spec:
              resourceConfig:
                providerConfigName:
                location:
                environment:
              parameters:
                vnetAddressSpace:
                dnsServers: []
                subnets:
          patches:
          - type: PatchSet
            patchSetName: common-parameters
          - type: FromCompositeFieldPath
            fromFieldPath: spec.parameters.vnetAddressSpace
            toFieldPath: spec.parameters.vnetAddressSpace
          - type: FromCompositeFieldPath
            fromFieldPath: spec.parameters.subnets
            toFieldPath: spec.parameters.subnets
          - type: ToCompositeFieldPath
            fromFieldPath: status.outputs['ResourceGroupName']
            toFieldPath: status.outputs['SpokeResourceGroupName']
          - type: ToCompositeFieldPath
            fromFieldPath: status.outputs['ResourceGroupId']
            toFieldPath: status.outputs['SpokeResourceGroupId']
          - type: ToCompositeFieldPath
            fromFieldPath: status.outputs['VirtualNetworkId']
            toFieldPath: status.outputs['SpokeVirtualNetworkId']
          - type: FromCompositeFieldPath
            fromFieldPath: spec.parameters.dnsServers
            toFieldPath: spec.parameters.dnsServers

        - name: route-table
          base:
            apiVersion: network.azure.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              name:
            spec:
              forProvider:
                resourceGroupName:
                route:
                  - addressPrefix: "0.0.0.0/0"
                    name: spoke-to-vpn
                    nextHopType: VirtualAppliance
                    nextHopInIpAddress: 
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: spec.resourceConfig.location
              toFieldPath: spec.forProvider.location
            - type: FromCompositeFieldPath
              fromFieldPath: status.outputs['SpokeResourceGroupName']
              toFieldPath: spec.forProvider.resourceGroupName
            - type: FromCompositeFieldPath
              fromFieldPath: spec.parameters.dnsServers[0]
              toFieldPath: spec.forProvider.route[0].nextHopInIpAddress
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: metadata.name
                  - fromFieldPath: spec.resourceConfig.environment
                  - fromFieldPath: spec.resourceConfig.location
                strategy: string
                string:
                  fmt: "rt-%s-%s-%s"
              toFieldPath: metadata.name

    - step: render-peerings
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $spoke := .observed.composite.resource.metadata.name }}
            {{- range $peerings := .observed.composite.resource.spec.parameters.peerings }}
            {{ if or (eq $.observed.composite.resource.status.outputs.SpokeResourceGroupName nil) (eq $.observed.composite.resource.status.outputs.SpokeVirtualNetworkId nil) }}
            {{ else }}
            ---
            apiVersion: network.azure.upbound.io/v1beta1
            kind: VirtualNetworkPeering
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: peering-{{ $spoke }}-{{ $peerings.name }}
                gotemplating.fn.crossplane.io/ready: "True"
                crossplane.io/external-name: peering-{{ $spoke }}-{{ $peerings.name }}
              name: peering-{{ $spoke }}-{{ $peerings.name }}
            spec:
              forProvider:
                resourceGroupName: {{ $.observed.composite.resource.status.outputs.SpokeResourceGroupName }}
                virtualNetworkName: {{ last (splitList "/" $.observed.composite.resource.status.outputs.SpokeVirtualNetworkId) }}
                remoteVirtualNetworkId: {{ $peerings.remoteVnetId }}
                allowGatewayTransit: true
                {{ if eq $peerings.isHub true }}
                allowForwardedTraffic: true
                useRemoteGateways: true
                {{ end }}
              providerConfigRef:
                  name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: network.azure.upbound.io/v1beta1
            kind: VirtualNetworkPeering
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: peering-{{ $peerings.name }}-{{ $spoke }}
                gotemplating.fn.crossplane.io/ready: "True"
                crossplane.io/external-name: peering-{{ $peerings.name }}-{{ $spoke }}
              name: peering-{{ $peerings.name }}-{{ $spoke }}
            spec:
              forProvider:
                resourceGroupName: {{ $peerings.remoteResourceGroupName }}
                virtualNetworkName: {{ $peerings.remoteVnetName }}
                remoteVirtualNetworkId: {{ $.observed.composite.resource.status.outputs.SpokeVirtualNetworkId }}
                allowGatewayTransit: true
              providerConfigRef:
                  name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: planum.mblb.net/v1alpha1
            kind: XSpoke
            status:
              outputs: {}
            {{ end }}
            {{- end }}

    - step: auto-ready
      functionRef:
        name: function-auto-ready