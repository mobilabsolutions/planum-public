apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xunitycatalogs.planum.mblb.net #has to be plural
  labels:
    planum.mblb.net/managed-by: "true"
spec:
  environment:
    environmentConfigs:
    - type: Selector
      selector:
        matchLabels:
        - key: type
          type: Value
          value: xlakehouse
        - key: name
          type: FromCompositeFieldPath
          valueFromFieldPath: spec.parameters.xLakehouseName

  compositeTypeRef:
    apiVersion: planum.mblb.net/v1alpha1
    kind: XUnityCatalog #has to be singular

  mode: Pipeline
  pipeline:

    - step: render-unity-catalog
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- $locationMappings := dict 
              "westeurope" "weu"
              "northeurope" "neu"
              "eastus" "eus"
              "germanywestcentral" "gwc"
              "switzerlandnorth" "sln"
            }}
            {{ $outputs := (index $.context "apiextensions.crossplane.io/environment").outputs }}
            {{ $locationAbbreviation := index $locationMappings $.observed.composite.resource.spec.resourceConfig.location }}
            {{ $prefix := printf "%s-%s-%s" $.observed.composite.resource.metadata.name $.observed.composite.resource.spec.resourceConfig.environment $locationAbbreviation  }}
            ---
            apiVersion: metastoreassignment.mobilabsolutions.com/v1alpha1
            kind: Assignment
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: metastore-assignment-dbw
                gotemplating.fn.crossplane.io/ready: "True"
              name: metastore-assignment-dbw
            spec:
              forProvider:
                metastoreId: {{ $.observed.composite.resource.spec.parameters.metastoreId }}
                workspaceId: {{ int $outputs.dbwId }}
              providerConfigRef:
                  name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            {{- range $cluster := $.observed.composite.resource.spec.parameters.clusters }}
            ---
            apiVersion: cluster.mobilabsolutions.com/v1alpha1
            kind: Cluster
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $cluster.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              labels: 
                name: {{ $cluster.name }}
              name: {{ $cluster.name }}
            spec:
              forProvider:
                clusterName: {{ $cluster.name }}
                sparkVersion: {{ default "12.2.x-scala2.12" $cluster.sparkVersion }}
                nodeTypeId: {{ default "Standard_DS3_v2" $cluster.nodeTypeId }}
                runtimeEngine: {{ default "PHOTON" $cluster.runtimeEngine }}
                numWorkers: {{ default 1 $cluster.numWorkers }} 
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: library.mobilabsolutions.com/v1alpha1
            kind: Library
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: library-{{ $cluster.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: library-{{ $cluster.name }}
            spec:
              forProvider:
                clusterIdSelector:
                  matchControllerRef: true
                  matchLabels: 
                    name: {{ $cluster.name }}
                {{ if ne $cluster.pypi nil }}
                pypi: {{ $cluster.pypi | toYaml | nindent 6 }}
                {{ end }}
                {{ if ne $cluster.maven nil }}
                maven: {{ $cluster.maven | toYaml | nindent 6 }}
                {{ end }}
                {{ if ne $cluster.jar nil }}
                jar: {{ $cluster.jar }}
                {{ end }}
                {{ if ne $cluster.whl nil }}
                whl: {{ $cluster.whl }}
                {{ end }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            {{- end }}
            ---
            {{- range $catalog := $.observed.composite.resource.spec.parameters.catalogs }}
            ---
            apiVersion: catalog.mobilabsolutions.com/v1alpha1
            kind: Catalog
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $catalog.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                name: {{ $catalog.name }}
              name: {{ $catalog.name }}
            spec:
              forProvider:
                {{ if ne $catalog.storageRoot nil }}
                storageRoot: {{ $catalog.storageRoot }}
                {{ end }}
                {{ if ne $catalog.properties nil }}
                properties: {{ $catalog.properties }}
                {{ end }}
                metastoreId: {{ $.observed.composite.resource.spec.parameters.metastoreId }}
                owner: {{ $catalog.owner }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: grants.mobilabsolutions.com/v1alpha1
            kind: Grants
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: grants-catalog-{{ $catalog.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: grants-catalog-{{ $catalog.name }}
            spec:
              forProvider:
                catalogSelector:
                  matchControllerRef: true
                  matchLabels: 
                    name: {{ $catalog.name }}
                grant: {{ $catalog.grants | toYaml | nindent 4 }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            {{- range $schema := $catalog.schemas }}
            apiVersion: schema.mobilabsolutions.com/v1alpha1
            kind: Schema
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: schema-{{ $schema.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: schema-{{ $schema.name }}
            spec:
              forProvider:
                catalogName: {{ $catalog.name }}
                name: {{ $schema.name }}
                owner: {{ $catalog.owner }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: grants.mobilabsolutions.com/v1alpha1
            kind: Grants
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: grants-schema-{{ $schema.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: grants-schema-{{ $schema.name }}
            spec:
              forProvider:
                schemaSelector:
                  matchControllerRef: true
                  matchLabels: 
                    name: {{ $schema.name }}
                grant: {{ $schema.grants | toYaml | nindent 4 }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            {{- end }}
            {{- end }}
            ---
            apiVersion: storagecredential.mobilabsolutions.com/v1alpha1
            kind: Credential
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: sc-{{ $prefix }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: sc-{{ $prefix }}
            spec:
              forProvider:
                metastoreId: {{ $.observed.composite.resource.spec.parameters.metastoreId }}
                azureManagedIdentity:
                - accessConnectorId: {{ $outputs.accessConnectorId }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            # apiVersion: grants.mobilabsolutions.com/v1alpha1
            # kind: Grants
            # metadata:
            #   annotations:
            #     gotemplating.fn.crossplane.io/composition-resource-name: grants-sc-cred
            #     gotemplating.fn.crossplane.io/ready: "True"
            #   name: grants-sc-cred
            # spec:
            #   forProvider:
            #     storageCredential: {{ print "sc-%s" $prefix }}
            #     grant:
            #   providerConfigRef:
            #     name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            {{- range $location := $.observed.composite.resource.spec.parameters.locations }}
            ---
            apiVersion: externallocation.mobilabsolutions.com/v1alpha1
            kind: Location
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $location.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                name: {{ $location.name }}
              name: {{ $location.name }}
            spec:
              forProvider:
                credentialNameSelector:
                  matchControllerRef: true
                metastoreId: {{ $.observed.composite.resource.spec.parameters.metastoreId }}
                owner: {{ $location.owner }}
                url: {{ $location.url }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            ---
            apiVersion: grants.mobilabsolutions.com/v1alpha1
            kind: Grants
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: grants-location-{{ $location.name }}
                gotemplating.fn.crossplane.io/ready: "True"
              name: grants-location-{{ $location.name }}
            spec:
              forProvider:
                externalLocationSelector:
                  matchControllerRef: true
                  matchLabels: 
                    name: {{ $location.name }}
                grant: {{ $location.grants | toYaml | nindent 4 }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.resourceConfig.providerConfigName }}
            {{- end }}

    - step: auto-ready
      functionRef:
        name: function-auto-ready