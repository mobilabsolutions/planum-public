apiVersion: v1
kind: ConfigMap
metadata:
  name: azcli
  namespace: planum
data:
  run.sh: |
    wget "https://dl.k8s.io/release/$(wget -O - https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    principalId=$(kubectl get configmap vm -n planum -ojson | jq -r '.data.vmIdentityPrincipalId')
    az login --identity --username $principalId
    az extension add --upgrade -n dns-resolver
    az extension add --upgrade -n azure-firewall
    apk add github-cli
    while true
    do
      crds=$(cat /etc/config/crds.json | jq -c '.crds[]')
      for crd in $crds; 
      do 
        crs=$(kubectl get $(echo $crd | jq -r '."api-resource"') -o json | jq -c '.items[]');
        crs_create=$(echo $crs|jq -c 'select( .metadata.deletionTimestamp == null)')
        for cr in $crs_create; 
        do
          bash $(echo $crd | jq -r '."create-script"' | sed 's/^/\/etc\/config\//') $cr; 
        done; 
        crs_delete=$(echo $crs|jq -c 'select( .metadata.deletionTimestamp != null)')
        for cr in $crs_delete; 
        do
          echo $crd | jq -r '."delete-script"' | sed 's/^/\/etc\/config\//'
          bash $(echo $crd | jq -r '."delete-script"' | sed 's/^/\/etc\/config\//') $cr; 
        done; 
      done
      echo "sleep 60s..."
      sleep 60
    done
  crds.json: |
    {
      "crds": [
        {
          "api-resource": "githubrepos.v1alpha1.planum.mblb.net",
          "create-script": "githubrepos-create.sh",
          "delete-script": "githubrepos-delete.sh"
        },
        {
          "api-resource": "vmids.v1alpha1.planum.mblb.net",
          "create-script": "vmids-create.sh",
          "delete-script": "vmids-delete.sh"
        },
        {
          "api-resource": "vmssids.v1alpha1.planum.mblb.net",
          "create-script": "vmssids-create.sh",
          "delete-script": "vmssids-delete.sh"
        },
        {
          "api-resource": "foos.v1alpha1.planum.mblb.net",
          "create-script": "foos-create.sh",
          "delete-script": "foos-delete.sh"
        },
        {
          "api-resource": "inboundendpoint.v1alpha1.planum.mblb.net",
          "create-script": "resolverinboundendpoint-create.sh",
          "delete-script": "resolverinboundendpoint-delete.sh"
        },
        {
          "api-resource": "firewallrules.v1alpha1.planum.mblb.net",
          "create-script": "firewallrules-create.sh",
          "delete-script": "firewallrules-delete.sh"
        }
      ]      
    }
  "githubrepos-create.sh": |
    echo "githubrepo create $1"
    gitHubSecret=$(kubectl get secret github -n planum -ojson)
    gitHubOrganization=$(echo $gitHubSecret | jq '.data.gitHubOrganization' | base64 -d)
    gitHubToken=$(echo $gitHubSecret | jq '.data.gitHubToken' | base64 -d)
    echo $gitHubToken | gh auth login -h github.com -p https --with-token
    gitHubRepo=$(echo $1 | jq -r '.spec.name')
    id=$(gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/$gitHubOrganization/$gitHubRepo" | jq '.id // empty')
    if test -z "$id"
    then
      echo "creating $name repo..."
      gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/orgs/$gitHubOrganization/repos" -f name="$gitHubRepo" -F private=true -F auto_init=true
    else
      echo "$name repo already exists"
    fi
  "githubrepos-delete.sh": |
    echo "githubrepo delete $1"
  "vmids-create.sh": |
    echo "vmid create $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VM_RG=$(echo $1 | jq -r '.spec.vmResourceGroup')
    VM_NAME=$(echo $1 | jq -r '.spec.vmName')
    subscriptionId=$(echo $1 | jq -r '.spec.subscriptionId')
    az account set --subscription $subscriptionId

    existing=$(az vm identity show -g $VM_RG -n $VM_NAME | grep "$id\":")
    if test -z "$existing"
    then
      az vm identity assign -g $VM_RG -n $VM_NAME --identities $id
      echo $1 | jq '.metadata += {finalizers: ["finalizer.planum.mblb.net"]}' | kubectl apply -f -
    else
      echo "$id is already assigned to $VM_NAME" 
    fi
  "vmids-delete.sh": |
    echo "vmid delete $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VM_RG=$(echo $1 | jq -r '.spec.vmResourceGroup')
    VM_NAME=$(echo $1 | jq -r '.spec.vmName')
    existing=$(az vm identity show -g $VM_RG -n $VM_NAME | grep "$id\":")
    if test -z "$existing"
    then
      echo "$id is not assigned to $VM_NAME" 
    else
      az vm identity remove -g $VM_RG -n $VM_NAME --identities $id
    fi
    echo $1 | jq -c 'del(.metadata.finalizers[])' | kubectl apply -f -
  "vmssids-create.sh": |
    echo "vmssid create $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VMSS_RG=$(echo $1 | jq -r '.spec.vmssResourceGroup')
    VMSS_NAME=$(echo $1 | jq -r '.spec.vmssName')
    existing=$(az vmss identity show -g $VMSS_RG -n $VMSS_NAME | grep subscriptions | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if [[ "$existing" == *"$id"*  ]]
    then
      echo "$id is already assigned to $VMSS_NAME" 
    else
      az vmss identity assign -g $VMSS_RG -n $VMSS_NAME --identities $id
      echo $1 | jq '.metadata += {finalizers: ["finalizer.planum.mblb.net"]}' | kubectl apply -f -
    fi
  "vmssids-delete.sh": |
    echo "vmssid delete $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VMSS_RG=$(echo $1 | jq -r '.spec.vmssResourceGroup')
    VMSS_NAME=$(echo $1 | jq -r '.spec.vmssName')
    existing=$(az vmss identity show -g $VMSS_RG -n $VMSS_NAME | grep subscriptions | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if [[ "$existing" == *"$id"*  ]]
    then
      az vmss identity remove -g $VMSS_RG -n $VMSS_NAME --identities $id
    else
      echo "$id is not assigned to $VMSS_NAME" 
    fi
    echo $1 | jq -c 'del(.metadata.finalizers[])' | kubectl apply -f -
  "foos-create.sh": |
    name=$(echo $1 | jq -r '.metadata.name')
    echo "foo create $name"
    echo $1 | jq --arg milli $(date +%s) '. + {status:{outputs:{updated:$milli}}}' | kubectl apply -f -
  "foos-delete.sh": |
    name=$(echo $1 | jq -r '.metadata.name')
    echo "foo delete $name"

  "resolverinboundendpoint-create.sh": |
    echo "resolverinboundendpoint create $1"
    LOCATION=$(echo $1 | jq -r '.spec.location')
    RESOURCE_GROUP_NAME=$(echo $1 | jq -r '.spec.resourceGroupName')
    DNS_RESOLVER_NAME=$(echo $1 | jq -r '.spec.privateDnsResolverName')
    SUBNET_ID=$(echo $1 | jq -r '.spec.subnetId')
    PCNAME=$(echo $1 | jq -r '.spec.providerConfigName')

    subscriptionId=$(kubectl get providerconfigs $PCNAME -o json  | jq -r '.spec.subscriptionID')
    az account set --subscription $subscriptionId

    existing=$(az dns-resolver inbound-endpoint show --dns-resolver-name $DNS_RESOLVER_NAME --resource-group $RESOURCE_GROUP_NAME --name "dns-inbound-endpoint" 2>&1 | grep subscriptions | grep dnsResolvers | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if ! [[ "$existing" == *"ResourceNotFound"* ]]
    then
      echo "Inbound Endpoint already exist in $DNS_RESOLVER_NAME"
    else
      az dns-resolver inbound-endpoint create --dns-resolver-name $DNS_RESOLVER_NAME --name "dns-inbound-endpoint" --location $LOCATION --ip-configurations [{id:$SUBNET_ID}] --resource-group $RESOURCE_GROUP_NAME
      INBOUND_IP=$(az dns-resolver inbound-endpoint show --dns-resolver-name $DNS_RESOLVER_NAME --resource-group $RESOURCE_GROUP_NAME --name "dns-inbound-endpoint" --query "[ipConfigurations[0].privateIpAddress]" -o tsv)
      TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      echo $1 | jq --arg TIME "$TIME" --arg INBOUND_IP "$INBOUND_IP" '.metadata += {finalizers: ["finalizer.planum.mblb.net"]} | .status.atProvider.inboundEndpointIp = $INBOUND_IP | .status.conditions[0] = {"lastTransitionTime": $TIME, "type": "Ready", "reason": "Available", "status": "True" }' | kubectl apply -f -
    fi

  "resolverinboundendpoint-delete.sh": |
    echo "resolverinboundendpoint delete $1"
    LOCATION=$(echo $1 | jq -r '.spec.location')
    RESOURCE_GROUP_NAME=$(echo $1 | jq -r '.spec.resourceGroupName')
    DNS_RESOLVER_NAME=$(echo $1 | jq -r '.spec.privateDnsResolverName')
    SUBNET_ID=$(echo $1 | jq -r '.spec.subnetId')
    PCNAME=$(echo $1 | jq -r '.spec.providerConfigName')

    subscriptionId=$(kubectl get providerconfigs $PCNAME -o json  | jq -r '.spec.subscriptionID')
    az account set --subscription $subscriptionId

    existing=$(az dns-resolver inbound-endpoint show --dns-resolver-name $DNS_RESOLVER_NAME --resource-group $RESOURCE_GROUP_NAME --name "dns-inbound-endpoint" 2>&1 | grep subscriptions | grep dnsResolvers | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if ! [[ "$existing" == *"ResourceNotFound"* ]]
    then
      az dns-resolver inbound-endpoint delete --dns-resolver-name $DNS_RESOLVER_NAME --name "dns-inbound-endpoint" --resource-group $RESOURCE_GROUP_NAME
    else
      echo "Inbound Endpoint does not exist"
    fi
    echo $1 | jq -c 'del(.metadata.finalizers[])' | kubectl apply -f -

  "firewallrules-create.sh": |
    echo "firewallrules create $1"
    COLLECTIONNAME=$(echo $1 | jq -r '.metadata.name')
    FIREWALLNAME=$(echo $1 | jq -r '.spec.firewallName')
    RESOURCEGROUPNAME=$(echo $1 | jq -r '.spec.resourceGroupName')
    ACTION=$(echo $1 | jq -r '.spec.action')
    RULES=$(echo $1 | jq -c '.spec.rules[]')
    PRIORITY=$(echo $1 | jq -r '.spec.priority')
    PCNAME=$(echo $1 | jq -r '.spec.providerConfigName')

    subscriptionId=$(kubectl get providerconfigs $PCNAME -o json  | jq -r '.spec.subscriptionID')
    az account set --subscription $subscriptionId

    existing=$(az network firewall network-rule collection show --collection-name $COLLECTIONNAME --firewall-name $FIREWALLNAME --resource-group $RESOURCEGROUPNAME 2>&1)
    if [[ "$existing" == *"does not exist"* ]]
    then
      counter=0
      while IFS= read -r rule; do
        NAME=$(echo "$rule" | jq -r '.name')
        DESTINATIONADDRESS=$(echo "$rule" | jq -r '.destinationAddress')
        DESTINATIONPORTS=$(echo "$rule" | jq -r '.destinationPorts')
        SOURCEADDRESS=$(echo "$rule" | jq -r '.sourceAddress')
        PROTOCOLS=$(echo "$rule" | jq -r '.protocols')
      ((counter++))

      if [ "$counter" -eq 1 ]; then
        echo "az network firewall network-rule create --action $ACTION --collection-name $COLLECTIONNAME --destination-ports $DESTINATIONPORTS --firewall-name $FIREWALLNAME --name $NAME --protocols $PROTOCOLS --resource-group $RESOURCEGROUPNAME --dest-addr $DESTINATIONADDRESS --priority $PRIORITY --source-addresses $SOURCEADDRESS"
        az network firewall network-rule create --action $ACTION --collection-name $COLLECTIONNAME --destination-ports $DESTINATIONPORTS --firewall-name $FIREWALLNAME --name $NAME --protocols $PROTOCOLS --resource-group $RESOURCEGROUPNAME --dest-addr $DESTINATIONADDRESS --priority $PRIORITY --source-addresses $SOURCEADDRESS
      else
        echo "az network firewall network-rule create --collection-name $COLLECTIONNAME --destination-ports $DESTINATIONPORTS --firewall-name $FIREWALLNAME --name $NAME --protocols $PROTOCOLS --resource-group $RESOURCEGROUPNAME --dest-addr $DESTINATIONADDRESS --source-addresses $SOURCEADDRESS"
        az network firewall network-rule create --collection-name $COLLECTIONNAME --destination-ports $DESTINATIONPORTS --firewall-name $FIREWALLNAME --name $NAME --protocols $PROTOCOLS --resource-group $RESOURCEGROUPNAME --dest-addr $DESTINATIONADDRESS --source-addresses $SOURCEADDRESS
      fi
      done <<< $RULES
    else
      echo "Firewall Rules already exist in $FIREWALLNAME"
    fi

    TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    echo $1 | jq --arg TIME "$TIME" '.metadata += {finalizers: ["finalizer.planum.mblb.net"]} | .status.conditions[0] = {"lastTransitionTime": $TIME, "type": "Ready", "reason": "Available", "status": "True" }' | kubectl apply -f -

  "firewallrules-delete.sh": |
    echo "firewallrules delete $1"
    COLLECTIONNAME=$(echo $1 | jq -r '.metadata.name')
    FIREWALLNAME=$(echo $1 | jq -r '.spec.firewallName')
    RESOURCEGROUPNAME=$(echo $1 | jq -r '.spec.resourceGroupName')
    ACTION=$(echo $1 | jq -r '.spec.action')
    RULES=$(echo $1 | jq -r '.spec.rules')
    PRIORITY=$(echo $1 | jq -r '.spec.priority')
    PCNAME=$(echo $1 | jq -r '.spec.providerConfigName')

    subscriptionId=$(kubectl get providerconfigs $PCNAME -o json  | jq -r '.spec.subscriptionID')
    az account set --subscription $subscriptionId

    existing=$(az network firewall network-rule collection show --collection-name $COLLECTIONNAME --firewall-name $FIREWALLNAME --resource-group $RESOURCEGROUPNAME 2>&1)
    if ! [[ "$existing" == *"does not exist"* ]]
    then
      az network firewall network-rule collection delete --collection-name $COLLECTIONNAME --firewall-name $FIREWALLNAME --resource-group $RESOURCEGROUPNAME
    else
      echo "Firewall rule does not exist"
    fi

    echo $1 | jq -c 'del(.metadata.finalizers[])' | kubectl apply -f -