apiVersion: v1
kind: ConfigMap
metadata:
  name: azcli
  namespace: planum
data:
  run.sh: |
    wget "https://dl.k8s.io/release/$(wget -O - https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    #principalId=$(kubectl get EnvironmentConfig vmss -ojson | jq -r '.data.vmssPrincipalId')
    #az login --identity --username $principalId
    while test -z $(kubectl get configmap -oname | grep "configmap/vm")
    do
      echo "login for first time"
      id=$(az login --identity|jq -r '.[0].id')
      kubectl create configmap vm --from-literal=id=$id
      sleep 15
    done
    if test -z $id
    then
      az login --identity $(kubectl get configmap vm -ojson | jq -r '.data.id')
    fi
    while true
    do
      crds=$(cat /etc/config/crds.json | jq -c '.crds[]')
      for crd in $crds; 
      do 
        crs=$(kubectl get $(echo $crd | jq -r '."api-resource"') -o json | jq -c '.items[]');
        crs_create=$(echo $crs|jq -c 'select( .metadata.deletionTimestamp == null)')
        for cr in $crs_create; 
        do
          bash $(echo $crd | jq -r '."create-script"' | sed 's/^/\/etc\/config\//') $cr; 
        done; 
        crs_delete=$(echo $crs|jq -c 'select( .metadata.deletionTimestamp != null)')
        for cr in $crs_delete; 
        do
          echo $crd | jq -r '."delete-script"' | sed 's/^/\/etc\/config\//'
          bash $(echo $crd | jq -r '."delete-script"' | sed 's/^/\/etc\/config\//') $cr; 
        done; 
      done
      echo "sleep 60s..."
      sleep 60
    done
  crds.json: |
    {
      "crds": [
        {
          "api-resource": "vmssids.v1alpha1.planum.mblb.net",
          "create-script": "vmssids-create.sh",
          "delete-script": "vmssids-delete.sh"
        },
        {
          "api-resource": "foos.v1alpha1.planum.mblb.net",
          "create-script": "foos-create.sh",
          "delete-script": "foos-delete.sh"
        }
      ]      
    }
  "vmssids-create.sh": |
    echo "vmssid create $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VMSS_RG=$(echo $1 | jq -r '.spec.vmssResourceGroup')
    VMSS_NAME=$(echo $1 | jq -r '.spec.vmssName')
    existing=$(az vmss identity show -g $VMSS_RG -n $VMSS_NAME | grep subscriptions | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if [[ "$existing" == *"$id"*  ]]
    then
      echo "$id is already assigned to $VMSS_NAME" 
    else
      az vmss identity assign -g $VMSS_RG -n $VMSS_NAME --identities $id
      echo $1 | jq '.metadata += {finalizers: ["finalizer.planum.mblb.net"]}' | kubectl apply -f -
    fi
  "vmssids-delete.sh": |
    echo "vmssid delete $1"
    id=$(echo $1 | jq -r '.spec.identity')
    VMSS_RG=$(echo $1 | jq -r '.spec.vmssResourceGroup')
    VMSS_NAME=$(echo $1 | jq -r '.spec.vmssName')
    existing=$(az vmss identity show -g $VMSS_RG -n $VMSS_NAME | grep subscriptions | sed 's/\"//g; s/://g; s/{//g' | awk '{$1=$1};1')
    if [[ "$existing" == *"$id"*  ]]
    then
      az vmss identity remove -g $VMSS_RG -n $VMSS_NAME --identities $id
    else
      echo "$id is not assigned to $VMSS_NAME" 
    fi
    echo $1 | jq -c 'del(.metadata.finalizers[])' | kubectl apply -f -
  "foos-create.sh": |
    echo "foo create $1"
  "foos-delete.sh": |
    echo "foo delete $1"
